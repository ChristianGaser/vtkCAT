/*=========================================================================

Program:   vtkINRIA3D
Module:    $Id: vtkViewImage2DWithTracer.h 1137 2009-04-03 15:31:45Z filus $
Language:  C++
Author:    $Author: filus $
Date:      $Date: 2009-04-03 17:31:45 +0200 (Fr, 03 Apr 2009) $
Version:   $Revision: 1137 $

Copyright (c) 2007 INRIA - Asclepios Project. All rights reserved.
See Copyright.txt for details.

This software is distributed WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the above copyright notices for more information.

=========================================================================*/
// version vtkRenderingAddOn
#ifndef _vtkViewImage2DWithTracer_h_
#define _vtkViewImage2DWithTracer_h_

#include "vtkINRIA3DConfigure.h"

#include<vector>
#include<iostream>

// vtk includes
#include <vtkRenderingAddOn/vtkViewImage2D.h>
#include <vtkImageTracerWidget.h>
#include <vtkImageData.h>
#include <vtkLookupTable.h>
#include <vtkRenderingAddOn/vtkImageTracerWidgetCallback.h>


class VTK_RENDERINGADDON_EXPORT vtkViewImage2DWithTracer: public vtkViewImage2D
{
  
 public:
  
  static vtkViewImage2DWithTracer* New();
  vtkTypeRevisionMacro(vtkViewImage2DWithTracer, vtkViewImage2D);


  virtual void Initialize ();
  virtual void Uninitialize ();
  

  void PrepareForDelete(void);


  /** Activate the manual tracing interactor */
  void SetManualTracingOn (void)
  {
    this->TracerWidget->InteractionOn();
  }

  
  /** De-activate the manual tracing interactor */
  void SetManualTracingOff (void)
  {
    this->TracerWidget->InteractionOff();
  }

  
  /** Switch on/off the manual tracing */
  void SetManualTracingVisibility (bool a)
  {
    if(a)
    {
      this->TracerWidget->On();
    }
    else
    {
      this->TracerWidget->Off();
    }
  }

  
  virtual void SetImage(vtkImageData* image);

  
  /**
     This method takes the polydata generated by the tracing
     widget and transform it into a binary image, with the
     label/color specified by the user.
  */
  void ValidateTracing (void);


  /** Set a new entry in the LUT */
  void SetLUTValue (const int&,
                    const double&,
                    const double&,
                    const double&,
                    const double&);

  
  void SetCurrentLabel (const double& val)
  {    
    this->CurrentLabel = val;
    if( val==0.0 )
    {
      this->CurrentLabel = 255.0; // erase label
    }
  }


  vtkGetMacro (CurrentLabel, double);
  

  vtkGetObjectMacro (Tracing, vtkImageData);

  
  vtkGetObjectMacro (LUT, vtkLookupTable);
  

  vtkGetObjectMacro (TracerWidget, vtkImageTracerWidget);
  
  
  void PrintSelf(ostream& os, vtkIndent indent);

  /**
     Switch between radiological (left is right and right is left) and
     neurological (left is left and right is right) conventions.
  */
  void SetConventionsToRadiological (void);

  /**
     Switch between radiological (left is right and right is left) and
     neurological (left is left and right is right) conventions.
  */
  void SetConventionsToNeurological (void);
  
 protected:
  vtkViewImage2DWithTracer();
  ~vtkViewImage2DWithTracer(); 

 private:

  // for manual tracing
  vtkImageTracerWidgetCallback*   TracerCbk;
  vtkImageTracerWidget*           TracerWidget;
  vtkImageData*                   Tracing;
  vtkLookupTable*                 LUT;
  double                          CurrentLabel;
  
};
  


#endif
